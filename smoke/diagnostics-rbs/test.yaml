---
test:
  duplicated-method-definition.rbs:
    diagnostics:
    - |
      duplicated-method-definition.rbs:2:2: [error] DuplicatedMethodDefinitionError: class_name=::DuplicatedMethodDefinitionError, method_name=foo
      │
      └   def foo: () -> void
          ~~~~~~~~~~~~~~~~~~~
    - |
      duplicated-method-definition.rbs:18:4: [error] DuplicatedMethodDefinitionError: class_name=::DuplicatedMethodDefinitionError::A, method_name=g
      │
      └     def g: () -> String
            ~~~~~~~~~~~~~~~~~~~
    - |
      duplicated-method-definition.rbs:6:4: [error] DuplicatedMethodDefinitionError: class_name=::DuplicatedMethodDefinitionError::_Hello, method_name=f
      │
      └     def f: () -> void
            ~~~~~~~~~~~~~~~~~
  generic-parameter-mismatch.rbs:
    diagnostics:
    - |
      generic-parameter-mismatch.rbs:5:2: [error] GenericParameterMismatchError: ::GenericParameterMismatchError::Foo
      │
      └   class Foo[A, B]
          ~~~~~~~~~~~~~~~
  invalid-method-overload.rbs:
    diagnostics:
    - |
      invalid-method-overload.rbs:2:2: [error] InvalidMethodOverloadError: class_name=::InvalidMethodOverload, method_name=foo
      │
      └   def foo: () -> void | ...
          ~~~~~~~~~~~~~~~~~~~~~~~~~
  invalid-type-application.rbs:
    diagnostics:
    - |
      invalid-type-application.rbs:2:13: [error] InvalidTypeApplicationError: name=::Integer, expected=[], actual=[3]
      │
      └   type foo = Integer[3]
                     ~~~~~~~~~~
    - |
      invalid-type-application.rbs:3:13: [error] InvalidTypeApplicationError: name=::Object, expected=[], actual=[::String]
      │
      └   type bar = Object[String]
                     ~~~~~~~~~~~~~~
  invalid_variance_annotation.rbs:
    diagnostics:
    - |
      invalid_variance_annotation.rbs:2:11: [error] InvalidVarianceAnnotationError: name=::InvalidVarianceAnnotationError, param=A
      │
      └   def foo: (A) -> void
                   ~~~~~~~~~~~
  recursive-alias.rbs:
    diagnostics:
    - |
      recursive-alias.rbs:2:2: [error] RecursiveAliasError: class_name=::RecursiveAlias, names=foo, bar, baz
      │
      └   alias foo bar
          ~~~~~~~~~~~~~
  recursive-class.rbs:
    diagnostics:
    - |
      recursive-class.rbs:1:0: [error] RecursiveAncestorError: ["::Foo", "::Bar", "::Foo"]
      │
      └ class Foo < Bar
        ~~~~~~~~~~~~~~~
    - |
      recursive-class.rbs:4:0: [error] RecursiveAncestorError: ["::Bar", "::Foo", "::Bar"]
      │
      └ class Bar < Foo
        ~~~~~~~~~~~~~~~
  superclass-mismatch.rbs:
    diagnostics:
    - |
      superclass-mismatch.rbs:2:2: [error] SuperclassMismatchError: ::SuperclassMismatch::Foo
      │
      └   class Foo < String
          ~~~~~~~~~~~~~~~~~~
  unknown-method-alias.rbs:
    diagnostics:
    - |
      unknown-method-alias.rbs:2:2: [error] UnknownMethodAliasError: class_name=::UnknownMethodAlias, method_name=foo
      │
      └   alias foo bar
          ~~~~~~~~~~~~~
  unknown-type-name.rbs:
    diagnostics:
    - |
      unknown-type-name.rbs:6:2: [error] UnknownTypeNameError: name=World
      │
      └   include World
          ~~~~~~~~~~~~~
    - |
      unknown-type-name.rbs:8:2: [error] UnknownTypeNameError: name=ABC
      │
      └   class Foo < ABC
          ~~~~~~~~~~~~~~~
    - |
      unknown-type-name.rbs:11:15: [error] UnknownTypeNameError: name=ZZZ
      │
      └   module Bar : ZZZ
                       ~~~
    - |
      unknown-type-name.rbs:4:9: [error] UnknownTypeNameError: name=::World
      │
      └   Hello: World
                 ~~~~~
    - |
      unknown-type-name.rbs:2:13: [error] UnknownTypeNameError: name=::bar
      │
      └   type foo = bar
                     ~~~
