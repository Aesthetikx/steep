---
test:
  duplicated-method-definition.rbs:
    diagnostics:
    - |
      duplicated-method-definition.rbs:2:2: [error] Non-overloading method definition of `foo` in `::DuplicatedMethodDefinitionError` cannot be duplicated
      │ Diagnostic ID: Ruby::DuplicatedMethodDefinitionError
      │
      └   def foo: () -> void
          ~~~~~~~~~~~~~~~~~~~
    - |
      duplicated-method-definition.rbs:18:4: [error] Non-overloading method definition of `g` in `::DuplicatedMethodDefinitionError::A` cannot be duplicated
      │ Diagnostic ID: Ruby::DuplicatedMethodDefinitionError
      │
      └     def g: () -> String
            ~~~~~~~~~~~~~~~~~~~
    - |
      duplicated-method-definition.rbs:6:4: [error] Non-overloading method definition of `f` in `::DuplicatedMethodDefinitionError::_Hello` cannot be duplicated
      │ Diagnostic ID: Ruby::DuplicatedMethodDefinitionError
      │
      └     def f: () -> void
            ~~~~~~~~~~~~~~~~~
  generic-parameter-mismatch.rbs:
    diagnostics:
    - |
      generic-parameter-mismatch.rbs:5:2: [error] Different generic parameters are specified across definitions of `::GenericParameterMismatchError::Foo`
      │ Diagnostic ID: Ruby::GenericParameterMismatchError
      │
      └   class Foo[A, B]
          ~~~~~~~~~~~~~~~
  invalid-method-overload.rbs:
    diagnostics:
    - |
      invalid-method-overload.rbs:2:2: [error] Cannot find a non-overloading definition of `foo` in `::InvalidMethodOverload`
      │ Diagnostic ID: Ruby::InvalidMethodOverloadError
      │
      └   def foo: () -> void | ...
          ~~~~~~~~~~~~~~~~~~~~~~~~~
  invalid-type-application.rbs:
    diagnostics:
    - |
      invalid-type-application.rbs:2:13: [error] Type `::Integer` is not generic but used as a generic type with 1 arguments
      │ Diagnostic ID: Ruby::InvalidTypeApplicationError
      │
      └   type foo = Integer[3]
                     ~~~~~~~~~~
    - |
      invalid-type-application.rbs:4:13: [error] Type `::Array` expects 1 arguments, but 2 arguments are given
      │ Diagnostic ID: Ruby::InvalidTypeApplicationError
      │
      └   type bar = Array[1, 2]
                     ~~~~~~~~~~~
    - |
      invalid-type-application.rbs:6:13: [error] Type `::Hash` is generic but used as a non generic type
      │ Diagnostic ID: Ruby::InvalidTypeApplicationError
      │
      └   type baz = Hash
                     ~~~~
  invalid_variance_annotation.rbs:
    diagnostics:
    - |
      invalid_variance_annotation.rbs:2:11: [error] The variance of type parameter `A` is covariant, but used in incompatible position here
      │ Diagnostic ID: Ruby::InvalidVarianceAnnotationError
      │
      └   def foo: (A) -> void
                   ~~~~~~~~~~~
  recursive-alias.rbs:
    diagnostics:
    - |
      recursive-alias.rbs:2:2: [error] Circular method alias is detected in `::RecursiveAlias`: foo -> bar -> baz
      │ Diagnostic ID: Ruby::RecursiveAliasError
      │
      └   alias foo bar
          ~~~~~~~~~~~~~
  recursive-class.rbs:
    diagnostics:
    - |
      recursive-class.rbs:1:0: [error] Circular inheritance/mix-in is detected: ::Foo <: ::Bar <: ::Baz <: ::Foo
      │ Diagnostic ID: Ruby::RecursiveAncestorError
      │
      └ class Foo < Bar
        ~~~~~~~~~~~~~~~
    - |
      recursive-class.rbs:4:0: [error] Circular inheritance/mix-in is detected: ::Bar <: ::Baz <: ::Foo <: ::Bar
      │ Diagnostic ID: Ruby::RecursiveAncestorError
      │
      └ class Bar < Baz
        ~~~~~~~~~~~~~~~
    - |
      recursive-class.rbs:7:0: [error] Circular inheritance/mix-in is detected: ::Baz <: ::Foo <: ::Bar <: ::Baz
      │ Diagnostic ID: Ruby::RecursiveAncestorError
      │
      └ class Baz < Foo
        ~~~~~~~~~~~~~~~
  superclass-mismatch.rbs:
    diagnostics:
    - |
      superclass-mismatch.rbs:2:2: [error] Different superclasses are specified for `::SuperclassMismatch::Foo`
      │ Diagnostic ID: Ruby::SuperclassMismatchError
      │
      └   class Foo < String
          ~~~~~~~~~~~~~~~~~~
  unknown-method-alias.rbs:
    diagnostics:
    - |
      unknown-method-alias.rbs:2:2: [error] Cannot find the original method `bar` in `::UnknownMethodAlias`
      │ Diagnostic ID: Ruby::UnknownMethodAliasError
      │
      └   alias foo bar
          ~~~~~~~~~~~~~
  unknown-type-name.rbs:
    diagnostics:
    - |
      unknown-type-name.rbs:6:2: [error] Cannot find type `World`
      │ Diagnostic ID: Ruby::UnknownTypeNameError
      │
      └   include World
          ~~~~~~~~~~~~~
    - |
      unknown-type-name.rbs:8:2: [error] Cannot find type `ABC`
      │ Diagnostic ID: Ruby::UnknownTypeNameError
      │
      └   class Foo < ABC
          ~~~~~~~~~~~~~~~
    - |
      unknown-type-name.rbs:11:15: [error] Cannot find type `ZZZ`
      │ Diagnostic ID: Ruby::UnknownTypeNameError
      │
      └   module Bar : ZZZ
                       ~~~
    - |
      unknown-type-name.rbs:4:9: [error] Cannot find type `::World`
      │ Diagnostic ID: Ruby::UnknownTypeNameError
      │
      └   Hello: World
                 ~~~~~
    - |
      unknown-type-name.rbs:2:13: [error] Cannot find type `::bar`
      │ Diagnostic ID: Ruby::UnknownTypeNameError
      │
      └   type foo = bar
                     ~~~
