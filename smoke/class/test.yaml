---
test:
  a.rb:
    diagnostics:
    - |
      a.rb:8:2: [error] MethodArityMismatch: method=bar
      │
      └   def bar(y)
          ~~~~~~~~~~
    - |
      a.rb:13:2: [error] MethodBodyTypeMismatch: method=to_s, expected=::String, actual=::Integer
      │   ::Integer <: ::String
      │    ::Numeric <: ::String
      │     ::Object <: ::String
      │      ::BasicObject <: ::String
      │ ==> ::BasicObject <: ::String does not hold
      │
      └   def to_s
          ~~~~~~~~
    - |
      a.rb:22:2: [error] MethodBodyTypeMismatch: method=self.baz, expected=::Integer, actual=::String
      │   ::String <: ::Integer
      │    ::Object <: ::Integer
      │     ::BasicObject <: ::Integer
      │ ==> ::BasicObject <: ::Integer does not hold
      │
      └   def self.baz
          ~~~~~~~~~~~~
  b.rb:
    diagnostics: []
  c.rb:
    diagnostics:
    - |
      c.rb:1:0: [error] UnexpectedDynamicMethod: module=::B, method=type
      │
      └ class B
        ~~~~~~~
  f.rb:
    diagnostics:
    - |
      f.rb:9:0: [error] IncompatibleAssignment: lhs_type=::D, rhs_type=::_E
      │   ::_E <: ::D
      │ ==> ::_E <: ::D does not hold
      │
      └ d = e
        ~~~~~
  g.rb:
    diagnostics:
    - |
      g.rb:1:0: [error] MethodDefinitionMissing: module=::B, method=name
      │
      └ class B
        ~~~~~~~
    - |
      g.rb:4:0: [error] MethodDefinitionMissing: module=::B, method=name
      │
      └ class C
        ~~~~~~~
  h.rb:
    diagnostics: []
  i.rb:
    diagnostics:
    - |
      i.rb:4:4: [error] IncompatibleAssignment: lhs_type=::Symbol, rhs_type=::Integer
      │   ::Integer <: ::Symbol
      │    ::Numeric <: ::Symbol
      │     ::Object <: ::Symbol
      │      ::BasicObject <: ::Symbol
      │ ==> ::BasicObject <: ::Symbol does not hold
      │
      └     x = super()
            ~~~~~~~~~~~
    - |
      i.rb:10:4: [error] IncompatibleArguments: receiver=::IncompatibleChild, method_type=(name: ::String) -> untyped
      │
      └     super()
            ~~~~~~~
