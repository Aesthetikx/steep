---
test:
  a.rb:
    diagnostics:
    - |
      a.rb:8:9: [error] Method parameters are incompatible with declaration `() -> ::String`
      │ Diagnostic ID: Ruby::MethodArityMismatch
      │
      └   def bar(y)
                 ~~~
    - |
      a.rb:13:2: [error] Cannot allow method body have type `::Integer` because declared as type `::String`
      │   ::Integer <: ::String
      │     ::Numeric <: ::String
      │       ::Object <: ::String
      │         ::BasicObject <: ::String
      │
      │ Diagnostic ID: Ruby::MethodBodyTypeMismatch
      │
      └   def to_s
          ~~~~~~~~
    - |
      a.rb:22:2: [error] Cannot allow method body have type `::String` because declared as type `::Integer`
      │   ::String <: ::Integer
      │     ::Object <: ::Integer
      │       ::BasicObject <: ::Integer
      │
      │ Diagnostic ID: Ruby::MethodBodyTypeMismatch
      │
      └   def self.baz
          ~~~~~~~~~~~~
  b.rb:
    diagnostics: []
  c.rb:
    diagnostics:
    - |
      c.rb:1:6: [error] @dynamic annotation contains unknown method name `type`
      │ Diagnostic ID: Ruby::UnexpectedDynamicMethod
      │
      └ class B
              ~
  f.rb:
    diagnostics:
    - |
      f.rb:9:0: [error] Cannot assign a value of type `::_E` to a variable of type `::D`
      │   ::_E <: ::D
      │
      │ Diagnostic ID: Ruby::IncompatibleAssignment
      │
      └ d = e
        ~~~~~
  g.rb:
    diagnostics:
    - |
      g.rb:1:6: [error] Cannot find implementation of method `::B#name`
      │ Diagnostic ID: Ruby::MethodDefinitionMissing
      │
      └ class B
              ~
    - |
      g.rb:4:6: [error] Cannot find implementation of method `::B#name`
      │ Diagnostic ID: Ruby::MethodDefinitionMissing
      │
      └ class C
              ~
  h.rb:
    diagnostics: []
  i.rb:
    diagnostics:
    - |
      i.rb:4:4: [error] Cannot assign a value of type `::Integer` to a variable of type `::Symbol`
      │   ::Integer <: ::Symbol
      │     ::Numeric <: ::Symbol
      │       ::Object <: ::Symbol
      │         ::BasicObject <: ::Symbol
      │
      │ Diagnostic ID: Ruby::IncompatibleAssignment
      │
      └     x = super()
            ~~~~~~~~~~~
    - |
      i.rb:10:4: [error] Cannot find method `initialize` of type `::IncompatibleChild` with compatible arity
      │ Method types:
      │   def initialize: (name: ::String) -> untyped
      │
      │ Diagnostic ID: Ruby::IncompatibleArguments
      │
      └     super()
            ~~~~~~~
