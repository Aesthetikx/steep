module Steep
  module Server
    class WorkerProcess
      interface _ProcessWaitThread
        def pid: () -> Integer
      end

      attr_reader reader: LanguageServer::Protocol::Transport::Io::Reader

      attr_reader writer: LanguageServer::Protocol::Transport::Io::Writer

      attr_reader stderr: IO?

      attr_reader name: String

      attr_reader wait_thread: Thread & _ProcessWaitThread

      attr_reader index: Integer?

      def initialize: (
        reader: LanguageServer::Protocol::Transport::Io::Reader,
        writer: LanguageServer::Protocol::Transport::Io::Writer,
        stderr: IO?,
        wait_thread: Thread & _ProcessWaitThread,
        name: String,
        ?index: Integer?
      ) -> void

      type worker_type = :interaction | :typecheck

      def self.spawn_worker: (
        worker_type `type`,
        name: String,
        steepfile: Pathname,
        ?steep_command: ::String,
        ?options: Array[String],
        ?delay_shutdown: bool,
        ?index: Integer?
      ) -> WorkerProcess

      def self.spawn_typecheck_workers: (
        steepfile: Pathname,
        args: Array[String],
        ?steep_command: ::String,
        ?count: Integer,
        ?delay_shutdown: bool
      ) -> Array[WorkerProcess]

      def <<: (untyped message) -> void

      def read: () { (untyped) -> void } -> void

      def kill: () -> void
    end
  end
end
