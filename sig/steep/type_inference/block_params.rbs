module Steep
  module TypeInference
    class BlockParams
      # Param object represents a block parameter
      #
      # * `var` is name of the parameter
      # * `type` is the type of the parameter, if given through inline annotation
      # * `value` is the default value node
      # * `node` is the node of the parameter
      #
      class Param
        attr_reader var: Symbol

        attr_reader type: AST::Types::t?

        attr_reader value: Parser::AST::Node?

        attr_reader node: Parser::AST::Node

        def initialize: (var: Symbol, type: AST::Types::t?, value: Parser::AST::Node?, node: Parser::AST::Node) -> void

        def ==: (untyped other) -> bool

        alias eql? ==

        def hash: () -> Integer
      end

      # MultipleParam object represents a _multiple_ block parameter
      #
      # ```ruby
      # foo do |(x, y)|
      #   #     ^^^^^^  This is the multiple block parameter
      # end
      # ```
      #
      # * `#node` is `:mlhs` node
      # * Param objects in `#params` don't have `value` because of Ruby syntax rule
      #
      class MultipleParam
        attr_reader node: Parser::AST::Node

        attr_reader params: Array[Param | MultipleParam]

        def initialize: (node: Parser::AST::Node, params: Array[Param | MultipleParam]) -> void

        def ==: (untyped other) -> bool

        alias eql? ==

        def hash: () -> Integer
      end

      attr_reader leading_params: Array[Param | MultipleParam]

      attr_reader optional_params: Array[Param]

      attr_reader rest_param: Param?

      attr_reader trailing_params: Array[Param | MultipleParam]

      attr_reader block_param: Param?

      def initialize: (
        leading_params: Array[Param | MultipleParam],
        optional_params: Array[Param],
        rest_param: Param?,
        trailing_params: Array[Param | MultipleParam],
        block_param: Param?
      ) -> void

      def params: () -> Array[Param | MultipleParam]

      def self.from_node: (Parser::AST::Node node, annotations: AST::Annotation::Collection) -> BlockParams?

      def self.from_multiple: (Parser::AST::Node node, AST::Annotation::Collection) -> MultipleParam

      def params_type: (?hint: Interface::Function::Params?) -> Interface::Function::Params

      def params_type0: (hint: nil) -> Interface::Function::Params
                      | (hint: Interface::Function::Params?) -> Interface::Function::Params?

      def zip: (Interface::Function::Params params_type, Interface::Block? block) -> Array[[Param, AST::Types::t]]

      def expandable_params?: (Interface::Function::Params params_type) -> bool

      def expandable?: () -> bool

      def each: () { (Param | MultipleParam) -> void } -> void
              | () -> Enumerator[Param | MultipleParam, void]
    end
  end
end
