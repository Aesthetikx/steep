use RBS::Environment, RBS::TypeName
use Steep::TypeInference::MethodCall

module Steep
  module Services
    class CompletionProvider
      # Cursor position
      class Position
        attr_reader line: Integer

        attr_reader column: Integer

        def initialize: (line: Integer, column: Integer) -> void

        def -: (Integer) -> Position
      end

      class Range
        attr_reader start: Position

        attr_reader end: Position

        def initialize: (start: Position, end: Position) -> void
      end

      class InstanceVariableItem
        attr_reader identifier: Symbol

        attr_reader range: Range

        attr_reader type: AST::Types::t

        def initialize: (identifier: Symbol, range: Range, type: AST::Types::t) -> void
      end

      class LocalVariableItem
        attr_reader identifier: Symbol

        attr_reader range: Range

        attr_reader type: AST::Types::t

        def initialize: (identifier: Symbol, range: Range, type: AST::Types::t) -> void
      end

      class ConstantItem
        attr_reader env: Environment

        attr_reader identifier: Symbol

        attr_reader range: Range

        attr_reader type: AST::Types::t

        attr_reader full_name: TypeName

        def initialize: (env: Environment, identifier: Symbol, range: Range, type: AST::Types::t, full_name: TypeName) -> void

        def class?: () -> bool

        def module?: () -> bool

        def comments: () -> Array[RBS::AST::Comment]
      end

      class MethodNameItem
        attr_reader identifier: Symbol

        attr_reader range: Range

        attr_reader receiver_type: AST::Types::t

        attr_reader method_type: RBS::MethodType

        attr_reader method_decls: Array[MethodCall::MethodDecl]

        def initialize: (identifier: Symbol, range: Range, method_type: RBS::MethodType, method_decls: Array[MethodCall::MethodDecl], receiver_type: AST::Types::t) -> void

        def comment: () -> RBS::AST::Comment?

        def inherited?: () -> bool
      end

      type item = InstanceVariableItem | LocalVariableItem | ConstantItem | MethodNameItem

      attr_reader source_text: String

      attr_reader path: Pathname

      attr_reader subtyping: Subtyping::Check

      attr_reader modified_text: String

      attr_reader source: Source

      attr_reader typing: Typing

      def initialize: (source_text: String, path: Pathname, subtyping: Subtyping::Check) -> void

      def type_check!: (String text, line: Integer, column: Integer) -> void

      def env: () -> Environment

      def run: (line: Integer, column: Integer) -> Array[item]

      def range_from_loc: (Parser::Source::Range loc) -> Range

      def at_end?: (Position pos, of: Parser::Source::Map | Parser::Source::Range | nil) -> boolish

      def range_for: (Position position, ?prefix: ::String) -> Range

      def items_for_trigger: (position: Position) -> Array[item]

      def items_for_dot: (position: Position) -> Array[item]

      def items_for_colon2: (position: Position) -> Array[item]

      def items_for_atmark: (position: Position) -> Array[item]

      def method_items_for_receiver_type: (AST::Types::t, include_private: bool, prefix: String, position: Position, items: Array[item]) -> void

      def word_name?: (String name) -> bool

      def local_variable_items_for_context: (TypeInference::Context context, position: Position, prefix: String, items: Array[item]) -> void

      def constant_items_for_context: (TypeInference::Context context, position: Position, prefix: String, items: Array[item], ?parent: Parser::AST::Node?) -> void

      def instance_variable_items_for_context: (TypeInference::Context context, position: Position, prefix: String, items: Array[item]) -> void

      def index_for: (String, line: Integer, column: Integer) -> Integer

      def disallowed_method?: (Symbol name) -> bool
    end
  end
end
